package com.pbl5.storage;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
public class StorageServiceImpl implements StorageService {

	private static final Logger logger = LoggerFactory.getLogger(StorageServiceImpl.class);

	private final Path rootLocation;

	public StorageServiceImpl() {
		this.rootLocation = Paths.get("src/main/resources/static/upload-dir");
	}

	@Override
	public void init() {
		try {
			Files.createDirectories(rootLocation);
			logger.info("Storage directory initialized at: {}", rootLocation);
		} catch (IOException e) {
			logger.error("Lỗi khi khởi tạo thư mục lưu trữ", e);
			throw new RuntimeException("Không thể khởi tạo thư mục lưu trữ", e);
		}
	}

	@Override
	public void avatarStorage(MultipartFile file, String url) {
		if (file.isEmpty()) {
			logger.warn("File tải lên rỗng: {}", url);
			throw new IllegalArgumentException("Không thể lưu file rỗng.");
		}

		Path destinationFile = rootLocation.resolve(Paths.get(url)).normalize().toAbsolutePath();

		if (!destinationFile.getParent().equals(rootLocation.toAbsolutePath())) {
			logger.warn("Cố gắng lưu file ngoài thư mục được phép: {}", destinationFile);
			throw new SecurityException("Không thể lưu file ngoài thư mục upload-dir.");
		}

		try (InputStream inputStream = file.getInputStream()) {
			Files.copy(inputStream, destinationFile, StandardCopyOption.REPLACE_EXISTING);
			logger.info("Lưu file thành công: {}", destinationFile);
		} catch (IOException e) {
			logger.error("Lỗi khi lưu file: {}", url, e);
			throw new RuntimeException("Lỗi khi lưu file", e);
		}
	}
	
	@Override
	public void fileStorage(MultipartFile[] files, String url) {
	    if (files == null || files.length == 0) {
	        logger.warn("Không có file nào được tải lên.");
	        throw new IllegalArgumentException("Không thể lưu file rỗng.");
	    }

	    for (MultipartFile file : files) {
	        if (!file.isEmpty()) {
	            String fileName = file.getOriginalFilename();
	            Path destinationFile = rootLocation.resolve(Paths.get(dir, fileName)).normalize().toAbsolutePath();

	            if (!destinationFile.getParent().equals(rootLocation.toAbsolutePath())) {
	                logger.warn("Cố gắng lưu file ngoài thư mục được phép: {}", destinationFile);
	                throw new SecurityException("Không thể lưu file ngoài thư mục upload-dir.");
	            }

	            try (InputStream inputStream = file.getInputStream()) {
	                Files.copy(inputStream, destinationFile, StandardCopyOption.REPLACE_EXISTING);
	                logger.info("Lưu file thành công: {}", destinationFile);
	            } catch (IOException e) {
	                logger.error("Lỗi khi lưu file: {}", fileName, e);
	                throw new RuntimeException("Lỗi khi lưu file", e);
	            }
	        }
	    }
	}
	
}
