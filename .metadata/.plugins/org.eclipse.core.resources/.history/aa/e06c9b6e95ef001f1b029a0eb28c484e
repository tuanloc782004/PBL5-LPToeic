package com.pbl5.model;

import java.util.List;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity
@Table(name = "mock_exam_question")
public class MockExamQuestion {

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	@ManyToOne
    @JoinColumn(name = "mock_exam_id", referencedColumnName = "id", nullable = false)
    private MockExam mockExam;
	
	@Column(name = "audio_url", length = 255)
	private String audioUrl;
	
	@Column(name = "correct_answer", length = 1, nullable = false)
	private String correctAnswer;
	
	@Column(name = "image_url", length = 255)
	private String imageUrl;
	
	@Column(name = "question_number", nullable = false)
	private int questionNumber;
	
	@Column(name = "answer_1", length = 255)
	private String answer1;
	
	@Column(name = "answer_2", length = 255)
	private String answer2;
	
	@Column(name = "answer_3", length = 255)
	private String answer3;
	
	@Column(name = "answer_4", length = 255)
	private String answer4;
	
	@Column(name = "paragraph", columnDefinition = "TEXT")
	private String paragraph;
	
	@Column(name = "question_text", length = 255)
	private String questionText;

	@OneToMany(mappedBy = "mockExamQuestion", fetch = FetchType.EAGER)
	private List<UserAnswer> userAnswers;
	
	public MockExamQuestion() {
		super();
		// TODO Auto-generated constructor stub
	}

	public MockExamQuestion(int id, MockExam mockExam, String audioUrl, String correctAnswer, String imageUrl,
			int questionNumber, String answer1, String answer2, String answer3, String answer4, String paragraph,
			String questionText, List<UserAnswer> userAnswers) {
		super();
		this.id = id;
		this.mockExam = mockExam;
		this.audioUrl = audioUrl;
		this.correctAnswer = correctAnswer;
		this.imageUrl = imageUrl;
		this.questionNumber = questionNumber;
		this.answer1 = answer1;
		this.answer2 = answer2;
		this.answer3 = answer3;
		this.answer4 = answer4;
		this.paragraph = paragraph;
		this.questionText = questionText;
		this.userAnswers = userAnswers;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public MockExam getMockExam() {
		return mockExam;
	}

	public void setMockExam(MockExam mockExam) {
		this.mockExam = mockExam;
	}

	public String getAudioUrl() {
		return audioUrl;
	}

	public void setAudioUrl(String audioUrl) {
		this.audioUrl = audioUrl;
	}

	public String getCorrectAnswer() {
		return correctAnswer;
	}

	public void setCorrectAnswer(String correctAnswer) {
		this.correctAnswer = correctAnswer;
	}

	public String getImageUrl() {
		return imageUrl;
	}

	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}

	public int getQuestionNumber() {
		return questionNumber;
	}

	public void setQuestionNumber(int questionNumber) {
		this.questionNumber = questionNumber;
	}

	public String getAnswer1() {
		return answer1;
	}

	public void setAnswer1(String answer1) {
		this.answer1 = answer1;
	}

	public String getAnswer2() {
		return answer2;
	}

	public void setAnswer2(String answer2) {
		this.answer2 = answer2;
	}

	public String getAnswer3() {
		return answer3;
	}

	public void setAnswer3(String answer3) {
		this.answer3 = answer3;
	}

	public String getAnswer4() {
		return answer4;
	}

	public void setAnswer4(String answer4) {
		this.answer4 = answer4;
	}

	public String getParagraph() {
		return paragraph;
	}

	public void setParagraph(String paragraph) {
		this.paragraph = paragraph;
	}

	public String getQuestionText() {
		return questionText;
	}

	public void setQuestionText(String questionText) {
		this.questionText = questionText;
	}

	public List<UserAnswer> getUserAnswers() {
		return userAnswers;
	}

	public void setUserAnswers(List<UserAnswer> userAnswers) {
		this.userAnswers = userAnswers;
	}
	
}
