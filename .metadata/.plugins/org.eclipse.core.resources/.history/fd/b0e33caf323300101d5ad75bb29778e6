package com.pbl5.ai;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.pbl5.dto.Part5DTO;

import java.util.*;

@Service
public class AiQuestionServiceImpl implements AiQuestionService {

	@Value("${cohere.api.key}")
	private String apiKey;

	@Value("${cohere.api.url}")
	private String apiUrl; // Đúng: https://api.cohere.ai/v1/chat

	private final RestTemplate restTemplate;
	private final ObjectMapper objectMapper = new ObjectMapper();

	public AiQuestionServiceImpl(RestTemplate restTemplate) {
		this.restTemplate = restTemplate;
	}

	@Override
	public List<Part5DTO> generatePart5Questions(int quantity) throws Exception {
		List<Part5DTO> result = new ArrayList<>();

		for (int i = 1; i <= quantity; i++) {
			String prompt = buildPrompt();

			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			headers.setBearerAuth(apiKey);

			Map<String, Object> requestBody = new HashMap<>();
			requestBody.put("model", "command-r-plus");
			requestBody.put("message", prompt);
			requestBody.put("temperature", 0.7);
			requestBody.put("max_tokens", 300);

			String bodyJson = objectMapper.writeValueAsString(requestBody);
			HttpEntity<String> request = new HttpEntity<>(bodyJson, headers);

			ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, request, String.class);

			if (response.getStatusCode() == HttpStatus.OK) {
				String text = parseTextFromResponse(response.getBody());
				Part5DTO question = parsePart5FromText(text);
				result.add(question);
			} else {
				throw new RuntimeException("Lỗi gọi API Cohere: " + response.getStatusCode());
			}
		}

		return result;
	}

	private String buildPrompt() {
		return "Sinh câu hỏi TOEIC Part 5 (Hoàn thành câu) theo định dạng sau:\n" + "(A) ...\n" + "(B) ...\n"
				+ "(C) ...\n" + "(D) ...\n" + "Đáp án đúng chỉ 1 ký tự A/B/C/D.\n" + "Giải thích bằng tiếng Việt.\n"
				+ "Trả lời theo định dạng:\n" + "Câu hỏi: <câu hỏi>\n" + "(A) ...\n" + "(B) ...\n" + "(C) ...\n"
				+ "(D) ...\n" + "Đáp án: <A/B/C/D>\n" + "Giải thích: <giải thích>";
	}

	private String parseTextFromResponse(String responseBody) throws Exception {
		JsonNode root = objectMapper.readTree(responseBody);
		return root.path("text").asText(); // Cohere trả về response có trường "text"
	}

	private Part5DTO parsePart5FromText(String text) {
		Part5DTO dto = new Part5DTO();

		String[] lines = text.split("\\r?\\n");
		StringBuilder questionBuilder = new StringBuilder();
		String optionA = "", optionB = "", optionC = "", optionD = "";
		String correctAnswer = "", explanation = "";

		for (String line : lines) {
			line = line.trim();
			if (line.startsWith("Câu hỏi:")) {
				questionBuilder.append(line.substring(8).trim());
			} else if (line.startsWith("(A)")) {
				optionA = line.substring(3).trim();
			} else if (line.startsWith("(B)")) {
				optionB = line.substring(3).trim();
			} else if (line.startsWith("(C)")) {
				optionC = line.substring(3).trim();
			} else if (line.startsWith("(D)")) {
				optionD = line.substring(3).trim();
			} else if (line.startsWith("Đáp án:")) {
				correctAnswer = line.substring(7).trim();
			} else if (line.startsWith("Giải thích:")) {
				explanation = line.substring(11).trim();
			}
		}

		dto.setQuestion(questionBuilder.toString());
		dto.setOptionA(optionA);
		dto.setOptionB(optionB);
		dto.setOptionC(optionC);
		dto.setOptionD(optionD);
		dto.setCorrectAnswer(correctAnswer);
		dto.setExplanation(explanation);

		return dto;
	}
}
