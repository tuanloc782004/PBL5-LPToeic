package com.pbl5.excel;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.pbl5.model.Part5;
import com.pbl5.model.Part6;
import com.pbl5.model.Part6Question;
import com.pbl5.model.ReadingExercise;
import com.pbl5.model.VocabularyLesson;
import com.pbl5.model.VocabularyLessonContent;
import com.pbl5.repository.Part5Repository;
import com.pbl5.repository.Part6Repository;
import com.pbl5.repository.VocabularyLessonContentRepository;

@Service
public class ExcelServiceImpl implements ExcelService {

	private static final Logger logger = LoggerFactory.getLogger(ExcelService.class);

	@Autowired
	private VocabularyLessonContentRepository vocabularyLessonContentRepository;
	
	@Autowired
	private Part5Repository part5Repository;
	
	@Autowired
	private Part6Repository part6Repository;

	@Override
	public List<VocabularyLessonContent> readVocabularyLessonContentExcelFile(MultipartFile file,
			VocabularyLesson vocabularyLesson, String myCode) {
		List<VocabularyLessonContent> vocabularyLessonContentList = new ArrayList<>();

		try (InputStream inputStream = file.getInputStream(); Workbook workbook = new XSSFWorkbook(inputStream)) {
			Sheet sheet = workbook.getSheetAt(0); // Lấy sheet đầu tiên

			for (Row row : sheet) {
				if (row.getRowNum() == 0)
					continue; // Bỏ qua dòng tiêu đề

				try {
					VocabularyLessonContent vocabularyContent = new VocabularyLessonContent();
					vocabularyContent.setNumber(getLongValue(row.getCell(0)));
					vocabularyContent.setContent(getStringValue(row.getCell(1)));
					vocabularyContent.setTranscribe(getStringValue(row.getCell(2)));
					vocabularyContent.setImageUrl("/upload-dir/image/" + myCode + getStringValue(row.getCell(3)));
					vocabularyContent.setAudioUrl("/upload-dir/audio/" + myCode + getStringValue(row.getCell(4)));
					vocabularyContent.setMeaning(getStringValue(row.getCell(5)));
					vocabularyContent.setSentence(getStringValue(row.getCell(6)));
					vocabularyContent.setVocabulary(vocabularyLesson);

					vocabularyLessonContentList.add(vocabularyContent);
				} catch (Exception e) {
					logger.warn("Bỏ qua dòng {} do lỗi xử lý dữ liệu: {}", row.getRowNum(), e.getMessage());
				}
			}
		} catch (IOException e) {
			logger.error("Lỗi khi đọc file Excel", e);
			throw new RuntimeException("Không thể đọc file Excel", e);
		}

		return vocabularyLessonContentList;
	}

	@Override
	public void saveVocabularyLessonContentFromExcel(MultipartFile file, VocabularyLesson vocabularyLesson,
			String myCode) {
		try {
			List<VocabularyLessonContent> list = readVocabularyLessonContentExcelFile(file, vocabularyLesson, myCode);

			if (list.isEmpty()) {
				logger.warn("Không có dữ liệu hợp lệ để lưu vào database.");
				return;
			}

			this.vocabularyLessonContentRepository.saveAll(list);
			logger.info("Đã lưu thành công {} mục vào database.", list.size());
		} catch (RuntimeException e) {
			logger.error("Lỗi khi lưu dữ liệu vào database", e);
			throw new RuntimeException("Không thể lưu dữ liệu vào database", e);
		}
	}

	private Long getLongValue(Cell cell) {
		if (cell == null)
			return null;
		try {
			if (cell.getCellType() == CellType.STRING) {
				return Long.parseLong(cell.getStringCellValue().trim());
			} else if (cell.getCellType() == CellType.NUMERIC) {
				return (long) cell.getNumericCellValue();
			}
		} catch (NumberFormatException e) {
			logger.warn("Lỗi chuyển đổi số: {}", cell.getStringCellValue());
		}
		return null;
	}

	private String getStringValue(Cell cell) {
		if (cell == null)
			return "";
		return switch (cell.getCellType()) {
		case STRING -> cell.getStringCellValue().trim();
		case NUMERIC -> String.valueOf((long) cell.getNumericCellValue());
		case BOOLEAN -> String.valueOf(cell.getBooleanCellValue());
		default -> "";
		};
	}

	@Override
	public List<Part5> readPart5ReadingExerciseExcelFile(MultipartFile file, ReadingExercise readingExercise) {
		// TODO Auto-generated method stub
		List<Part5> part5List = new ArrayList<>();
		Long i = 1L;

		try (InputStream inputStream = file.getInputStream(); Workbook workbook = new XSSFWorkbook(inputStream)) {
			Sheet sheet = workbook.getSheetAt(0); // Lấy sheet đầu tiên

			for (Row row : sheet) {
				if (row.getRowNum() == 0)
					continue; // Bỏ qua dòng tiêu đề

				try {
					Part5 part5 = new Part5();
					part5.setNumber(i);
					part5.setQuestion(getStringValue(row.getCell(0)));
					part5.setOptionA(getStringValue(row.getCell(1)));
					part5.setOptionB(getStringValue(row.getCell(2)));
					part5.setOptionC(getStringValue(row.getCell(3)));
					part5.setOptionD(getStringValue(row.getCell(4)));
					part5.setCorrectAnswer(getStringValue(row.getCell(5)));
					part5.setExplanation(getStringValue(row.getCell(6)));
					part5.setReadingExercise(readingExercise);

					part5List.add(part5);
					i++;
				} catch (Exception e) {
					logger.warn("Bỏ qua dòng {} do lỗi xử lý dữ liệu: {}", row.getRowNum(), e.getMessage());
				}
			}
		} catch (IOException e) {
			logger.error("Lỗi khi đọc file Excel", e);
			throw new RuntimeException("Không thể đọc file Excel", e);
		}

		return part5List;
	}

	@Override
	public void savePart5ReadingExerciseFromExcel(MultipartFile file, ReadingExercise readingExercise) {
		// TODO Auto-generated method stub
		try {
			List<Part5> list = readPart5ReadingExerciseExcelFile(file, readingExercise);

			if (list.isEmpty()) {
				logger.warn("Không có dữ liệu hợp lệ để lưu vào database.");
				return;
			}

			this.part5Repository.saveAll(list);
			logger.info("Đã lưu thành công {} mục vào database.", list.size());
		} catch (RuntimeException e) {
			logger.error("Lỗi khi lưu dữ liệu vào database", e);
			throw new RuntimeException("Không thể lưu dữ liệu vào database", e);
		}
	}
	
	@Override
	public List<Part6Question> readPart6ReadingExerciseExcelFile(MultipartFile file, Part6 part6) {
		// TODO Auto-generated method stub
		List<Part6Question> part6QuestionList = new ArrayList<>();
		Long i = 1L;

		try (InputStream inputStream = file.getInputStream(); Workbook workbook = new XSSFWorkbook(inputStream)) {
			Sheet sheet = workbook.getSheetAt(0); // Lấy sheet đầu tiên

			for (Row row : sheet) {
				if (row.getRowNum() == 0)
					continue; // Bỏ qua dòng tiêu đề

				try {
					Part6Question part6Question = new Part6Question();
					part6Question.setNumber(i);
					part6Question.setOptionA(getStringValue(row.getCell(1)));
					part6Question.setOptionB(getStringValue(row.getCell(2)));
					part6Question.setOptionC(getStringValue(row.getCell(3)));
					part6Question.setOptionD(getStringValue(row.getCell(4)));
					part6Question.setCorrectAnswer(getStringValue(row.getCell(5)));
					part6Question.setExplanation(getStringValue(row.getCell(6)));
					part6Question.setPart6(part6);

					part6QuestionList.add(part6Question);
					i++;
				} catch (Exception e) {
					logger.warn("Bỏ qua dòng {} do lỗi xử lý dữ liệu: {}", row.getRowNum(), e.getMessage());
				}
			}
		} catch (IOException e) {
			logger.error("Lỗi khi đọc file Excel", e);
			throw new RuntimeException("Không thể đọc file Excel", e);
		}

		return part6QuestionList;
	}

	@Override
	public void savePart6ReadingExerciseFromExcel(MultipartFile file, Part6 part6) {
		// TODO Auto-generated method stub
		try {
			List<Part6> list = readPart6ReadingExerciseExcelFile(file, part6);

			if (list.isEmpty()) {
				logger.warn("Không có dữ liệu hợp lệ để lưu vào database.");
				return;
			}

			this.part6Repository.saveAll(list);
			logger.info("Đã lưu thành công {} mục vào database.", list.size());
		} catch (RuntimeException e) {
			logger.error("Lỗi khi lưu dữ liệu vào database", e);
			throw new RuntimeException("Không thể lưu dữ liệu vào database", e);
		}
	}

}
