package com.pbl5.controller.auth;

import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.pbl5.dto.UserRegisterDTO;
import com.pbl5.model.Role;
import com.pbl5.model.User;
import com.pbl5.service.OtpService;
import com.pbl5.service.RoleService;
import com.pbl5.service.UserService;

@Controller
@RequestMapping
public class AuthController {

	@Autowired
	private OtpService otpService;

	@Autowired
	private JavaMailSender mailSender;

	@Autowired
	private UserService userService;

	@Autowired
	private RoleService roleService;

	Long idOfUserRole = 2L;

	@GetMapping("/register")
	public String showRegisterForm(Model model) {
		model.addAttribute("user", new UserRegisterDTO());
		model.addAttribute("showRegister", true);
		return "login-form";
	}

	@PostMapping("/register")
	public String register(@ModelAttribute("user") UserRegisterDTO user, Model model, HttpSession session) {
		if (userService.findByEmail(user.getEmail()) != null) {
			model.addAttribute("error", "Email đã tồn tại");
			model.addAttribute("showRegister", true);
			return "login-form";
		}

		if (userService.findByUsername(user.getUsername()) != null) {
			model.addAttribute("error", "Username đã tồn tại");
			model.addAttribute("showRegister", true);
			return "login-form";
		}

		if (!user.getPassword().equals(user.getConfirmPassword())) {
			model.addAttribute("error", "Mật khẩu nhập lại không khớp");
			model.addAttribute("showRegister", true);
			return "login-form";
		}

		String otp = otpService.generateOtp(user.getEmail());
		sendOtpEmail(user.getEmail(), otp);

		session.setAttribute("otp", otp);
		session.setAttribute("registerUser", user);
		session.setAttribute("registerEmail", user.getEmail());
		session.setAttribute("otpStartTime", System.currentTimeMillis()); // Bắt đầu đếm
		session.setAttribute("otpAttempts", 0);

		model.addAttribute("email", user.getEmail());
		model.addAttribute("remainingAttempts", 3);
		model.addAttribute("remainingTime", 60);

		return "otp";
	}

	@PostMapping("/resend-otp")
	public String resendOtp(HttpSession session, Model model) {
		String email = (String) session.getAttribute("registerEmail");
		if (email == null) {
			return "redirect:/register";
		}

		String otp = otpService.generateOtp(email);
		session.setAttribute("otp", otp);
		sendOtpEmail(email, otp);

		model.addAttribute("email", email);
		model.addAttribute("remainingTime", 60);
	    model.addAttribute("remainingAttempts", 3); 
		model.addAttribute("resendSuccess", true);
		return "otp";
	}

	@PostMapping("/verify-otp")
	public String verifyOtp(@RequestParam String otp, HttpSession session, Model model,
			RedirectAttributes redirectAttributes) {
		UserRegisterDTO dto = (UserRegisterDTO) session.getAttribute("registerUser");
		String email = (String) session.getAttribute("registerEmail");

		Integer attempts = (Integer) session.getAttribute("otpAttempts");
		if (attempts == null)
			attempts = 0;

		// Kiểm tra OTP
		boolean isValid = otpService.verifyOtp(email, otp);
		if (!isValid) {
			attempts++;
			session.setAttribute("otpAttempts", attempts);

			if (attempts >= 3) {
				session.invalidate();
				model.addAttribute("error", "Bạn đã nhập sai 3 lần. Hãy đăng ký lại.");
				model.addAttribute("showRegister", true);
				model.addAttribute("user", new UserRegisterDTO());
				return "login-form";
			}

			model.addAttribute("email", email);
			model.addAttribute("error", "Mã OTP không đúng hoặc đã hết hạn.");
			model.addAttribute("remainingAttempts", 3 - attempts);

			// giữ thời gian còn lại
			Long startTime = (Long) session.getAttribute("otpStartTime");
			if (startTime != null) {
				long elapsed = (System.currentTimeMillis() - startTime) / 1000;
				long remainingTime = Math.max(60 - elapsed, 0);
				model.addAttribute("remainingTime", remainingTime);
			}

			return "otp";
		}

		// Nếu đúng OTP thì tạo user
		User user = new User();
		user.setUsername(dto.getUsername());
		user.setEmail(dto.getEmail());
		user.setPassword(new BCryptPasswordEncoder().encode(dto.getPassword()));
		user.setAvatarUrl("/upload-dir/avatar.jpg");

		Role role = roleService.findById(idOfUserRole);
		user.setRole(role);
		userService.save(user);

		otpService.clearOtp(email);
		session.invalidate();

		redirectAttributes.addFlashAttribute("success", "Đăng ký thành công! Vui lòng đăng nhập.");
		return "redirect:/login";
	}

	private void sendOtpEmail(String email, String otp) {
		SimpleMailMessage message = new SimpleMailMessage();
		message.setTo(email);
		message.setSubject("Mã OTP xác thực");
		message.setText("Mã OTP của bạn là: " + otp);
		mailSender.send(message);
	}
}
